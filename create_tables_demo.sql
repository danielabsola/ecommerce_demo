CREATE TABLE item_status (
    status_id   INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    desc_status VARCHAR(50) NOT NULL,
    CONSTRAINT unique_status UNIQUE(desc_status)
);

CREATE TABLE categories_master (
    category_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    desc_category VARCHAR(150) NOT NULL,
    CONSTRAINT unique_main_cat UNIQUE(desc_category)
);

CREATE TABLE subcategories_first_level (
    cat_fst_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    category_id BIGINT NOT NULL,
    desc_category VARCHAR(150) NOT NULL,
    CONSTRAINT unique_first_cat UNIQUE(desc_category),
    CONSTRAINT fk_category_id FOREIGN KEY (category_id) REFERENCES categories_master(category_id)
);

CREATE TABLE subcategories_second_level (
    cat_snd_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    cat_fst_id BIGINT NOT NULL,
    category_id BIGINT NOT NULL,
    desc_category VARCHAR(150) NOT NULL,
    CONSTRAINT unique_second_cat UNIQUE(desc_category),
    CONSTRAINT fk_category_id FOREIGN KEY (category_id) REFERENCES categories_master(category_id)
    CONSTRAINT fk_cat_fst_id FOREIGN KEY (cat_fst_id) REFERENCES subcategories_first_level(cat_fst_id)
);

CREATE TABLE countries (
    country_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    desc_countries VARCHAR(150) NOT NULL,
    CONSTRAINT unique_desc_countries UNIQUE(desc_countries)
);

CREATE TABLE states (
    state_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    country_id BIGINT NOT NULL,
    desc_state VARCHAR(150) NOT NULL,
    CONSTRAINT unique_desc_state UNIQUE(desc_state),
    CONSTRAINT fk_country_id FOREIGN KEY (country_id) REFERENCES countries(country_id)
) PARTITION BY LIST (left(lower(desc_state), 1));

CREATE TABLE cities (
    city_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    state_id BIGINT NOT NULL,
    country_id BIGINT NOT NULL,
    desc_city VARCHAR(150) NOT NULL,
    CONSTRAINT unique_desc_city UNIQUE(desc_city),
    CONSTRAINT fk_country_id FOREIGN KEY (country_id) REFERENCES countries(country_id)
    CONSTRAINT fk_state_id FOREIGN KEY (state_id) REFERENCES states(state_id)
) PARTITION BY LIST (left(lower(desc_city), 1));

CREATE TABLE address (
    address_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    city_id BIGINT NOT NULL,
    state_id BIGINT NOT NULL,
    country_id BIGINT NOT NULL,
    street_main VARCHAR(150) NOT NULL,
    street_right VARCHAR(150) NOT NULL,
    street_left VARCHAR(150) NOT NULL,
    number_house VARCHAR(10) NOT NULL,
    number_flat VARCHAR(10),
    number_door VARCHAR(10),
    postal_code VARCHAR(10) NOT NULL,
    CONSTRAINT fk_country_id FOREIGN KEY (country_id) REFERENCES countries(country_id)
    CONSTRAINT fk_state_id FOREIGN KEY (state_id) REFERENCES states(state_id)
    CONSTRAINT fk_city_id FOREIGN KEY (city_id) REFERENCES cities(city_id)
);

CREATE TABLE gender_types (
    gender_type_id   integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    desc_gender_type VARCHAR(50) NOT NULL,
    CONSTRAINT unique_status UNIQUE(desc_gender_type)
);

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE customers (
    customer_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), /* tambien podr√≠a usarse uuid_generate_v5(namespace UUID, name text)*/
    address_id  BIGINT NOT NULL,
    gender_type_id  BIGINT NOT NULL,
    desc_first_name varchar(50) NOT NULL,
    desc_last_name varchar(50) NOT NULL,
    email varchar(50) NOT NULL,
    phone_number varchar(20) NOT NULL,
    birthdate date NOT NULL,
    CONSTRAINT unique_email UNIQUE(email)
    CONSTRAINT fk_address_id FOREIGN KEY (address_id) REFERENCES address(address_id)
    CONSTRAINT fk_gender_type_id FOREIGN KEY (gender_type_id) REFERENCES gender_types(gender_type_id)
) PARTITION BY HASH (customer_id);

CREATE TABLE items (
    item_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    customer_id_seller UUID NOT NULL,
    status_id INTEGER NOT NULL,
    category_id NOT NULL,
    cat_fst_id BIGINT NOT NULL,
    cat_snd_id BIGINT NOT NULL,
    desc_item VARCHAR(200) NOT NULL,
    quantity_available INTEGER NOT NULL,
    unit_amount FLOAT NOT NULL,
    cancelattion_date DATE,
    CONSTRAINT fk_customer_id_seller FOREIGN KEY (customer_id_seller) REFERENCES customer(customer_id)
    CONSTRAINT fk_status_id FOREIGN KEY (status_id) REFERENCES item_status(status_id)
    CONSTRAINT fk_category_id FOREIGN KEY (category_id) REFERENCES categories_master(category_id)
    CONSTRAINT fk_cat_fst_id FOREIGN KEY (cat_fst_id) REFERENCES subcategories_first_level(cat_fst_id)
    CONSTRAINT fk_cat_snd_id FOREIGN KEY (cat_snd_id) REFERENCES subcategories_first_level(cat_snd_id)
) PARTITION BY HASH (customer_id_seller);

CREATE SEQUENCE order_id_seq;

CREATE TABLE orders (
    order_id BIGINT DEFAULT nextval('order_id_seq') NOT NULL,
    customer_id_buyer UUID NOT NULL,
    item_id BIGINT NOT NULL,
    order_date DATE NOT NULL,
    quantity INTEGER NOT NULL,
    PRIMARY KEY (order_id),
    CONSTRAINT fk_customer_id_buyer FOREIGN KEY (customer_id_buyer) REFERENCES customer(customer_id)
    CONSTRAINT fk_item_id FOREIGN KEY (item_id) REFERENCES items(item_id)
) PARTITION BY RANGE (EXTRACT(YEAR FROM order_date), EXTRACT(MONTH FROM order_date));

CREATE TABLE items_bkp_daily (
    date_bkp DATE NOT NULL,
    status_id INTEGER NOT NULL,
    item_id BIGINT NOT NULL,
    unit_amount FLOAT NOT NULL,
    PRIMARY KEY (date_bkp, status_id, item_id)
    CONSTRAINT fk_status_id FOREIGN KEY (status_id) REFERENCES item_status(status_id)
    CONSTRAINT fk_item_id FOREIGN KEY (item_id) REFERENCES items(item_id)
);